<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>persistencelzx&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-04-11T08:18:34.146Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>persistencelzx</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello My Blog</title>
    <link href="http://example.com/2025/04/10/hello-world/"/>
    <id>http://example.com/2025/04/10/hello-world/</id>
    <published>2025-04-10T11:38:24.000Z</published>
    <updated>2025-04-11T08:18:34.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>大家好！这是我的第一篇博客！</p><p>简单介绍一下吧，本人目前就读于上海某高校数据科学与大数据技术专业，2026年毕业，每天的日常就是吃饭，睡觉，学习，健身。由于我走的是保研这条路，所以现在还在写论文，研究方向为水文和人工智能的交叉应用。不过现在的水平只能将人工智能当作一个工具（调包大师），闲下来的时候也有在系统的学习AI方面的知识（统计学习方法和李沐老师的动手学深度学习）。</p><p>在后续的这段日子，我会在博客上更新一些日常的杂七杂八感想和学习记录。博客刚搭起来所以还有点毛坯，后面会慢慢优化的。我的邮箱也放在博客上，欢迎志同道合的人一起交流。</p><p>梦想是去NUS读博，共勉。</p><h1 id="代码块测试"><a href="#代码块测试" class="headerlink" title="代码块测试"></a>代码块测试</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestClassifier</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report, accuracy_score, roc_auc_score</span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断复合事件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">evaluate_degree_1</span>(<span class="params">df</span>):</span><br><span class="line">    tmp = df.copy()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">classify_event</span>(<span class="params">row</span>):</span><br><span class="line">        spi, sti = row[<span class="string">&#x27;SPI&#x27;</span>], row[<span class="string">&#x27;STI&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> spi &lt; -<span class="number">0.5</span> <span class="keyword">and</span> sti &gt;= <span class="number">0.5</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;发生复合事件&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;正常&#x27;</span></span><br><span class="line">    </span><br><span class="line">    tmp[<span class="string">&#x27;联合等级&#x27;</span>] = tmp.apply(classify_event, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分子流域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">watershed_delineation</span>(<span class="params">file_path, watershed_name</span>):</span><br><span class="line">    df_son_watershed = pd.DataFrame()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(file_path):</span><br><span class="line">        name = os.path.basename(f).split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> watershed_name:</span><br><span class="line">            full_path = os.path.join(file_path, f)</span><br><span class="line">            data = pd.read_csv(full_path)</span><br><span class="line">            df_son_watershed = pd.concat([df_son_watershed, data], ignore_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> df_son_watershed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">upper_weihe = [<span class="string">&#x27;临洮&#x27;</span>, <span class="string">&#x27;岷县&#x27;</span>, <span class="string">&#x27;华家岭&#x27;</span>, <span class="string">&#x27;天水&#x27;</span>, <span class="string">&#x27;西吉&#x27;</span>, <span class="string">&#x27;宝鸡&#x27;</span>] <span class="comment"># 渭河上游</span></span><br><span class="line">middle_weihe = [<span class="string">&#x27;武功&#x27;</span>, <span class="string">&#x27;佛坪&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;商州&#x27;</span>] <span class="comment"># 渭河中游</span></span><br><span class="line">lower_weihe = [<span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;镇安&#x27;</span>, <span class="string">&#x27;华山&#x27;</span>, <span class="string">&#x27;铜川&#x27;</span>] <span class="comment"># 渭河下游</span></span><br><span class="line">north_luohe = [<span class="string">&#x27;洛阳&#x27;</span>, <span class="string">&#x27;吴旗&#x27;</span>, <span class="string">&#x27;铜川&#x27;</span>, <span class="string">&#x27;延安&#x27;</span>] <span class="comment"># 北洛河</span></span><br><span class="line">jinhe = [<span class="string">&#x27;环县&#x27;</span>, <span class="string">&#x27;固原&#x27;</span>, <span class="string">&#x27;平凉&#x27;</span>, <span class="string">&#x27;西峰镇&#x27;</span>, <span class="string">&#x27;长武&#x27;</span>] <span class="comment"># 泾河</span></span><br><span class="line"></span><br><span class="line">folder_path = <span class="string">r&#x27;D:\git_project\ai\paper2_randomforest\final_data&#x27;</span></span><br><span class="line">df_upper_weihe = watershed_delineation(folder_path, upper_weihe)</span><br><span class="line">df_middle_weihe = watershed_delineation(folder_path, middle_weihe)</span><br><span class="line">df_lower_weihe = watershed_delineation(folder_path, lower_weihe)</span><br><span class="line">df_north_luohe = watershed_delineation(folder_path, north_luohe)</span><br><span class="line">df_jinhe = watershed_delineation(folder_path, jinhe)</span><br><span class="line"></span><br><span class="line">df_upper_weihe = evaluate_degree_1(df_upper_weihe)</span><br><span class="line">df_middle_weihe = evaluate_degree_1(df_middle_weihe)</span><br><span class="line">df_lower_weihe = evaluate_degree_1(df_lower_weihe)</span><br><span class="line">df_north_luohe = evaluate_degree_1(df_north_luohe)</span><br><span class="line">df_jinhe = evaluate_degree_1(df_jinhe)</span><br><span class="line">watershed_list = [df_upper_weihe, df_middle_weihe, df_lower_weihe, df_north_luohe, df_jinhe] <span class="comment"># 五个流域数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> watershed_list:</span><br><span class="line">    i.drop(columns=[<span class="string">&#x27;参考地名&#x27;</span>, <span class="string">&#x27;经度(lon)&#x27;</span>, <span class="string">&#x27;纬度(lat)&#x27;</span>, <span class="string">&#x27;年份&#x27;</span>, <span class="string">&#x27;月份&#x27;</span>, <span class="string">&#x27;SPI&#x27;</span>, <span class="string">&#x27;STI&#x27;</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">    i.columns = [<span class="string">&#x27;NDVI&#x27;</span>, <span class="string">&#x27;SM&#x27;</span>, <span class="string">&#x27;TMP&#x27;</span>, <span class="string">&#x27;ET&#x27;</span>, <span class="string">&#x27;PRE&#x27;</span>, <span class="string">&#x27;TMN&#x27;</span>, <span class="string">&#x27;TMX&#x27;</span>, <span class="string">&#x27;target&#x27;</span>]</span><br><span class="line">    i[<span class="string">&#x27;target&#x27;</span>] = i[<span class="string">&#x27;target&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;正常&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;发生复合事件&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">feature_cols = [<span class="string">&#x27;NDVI&#x27;</span>, <span class="string">&#x27;SM&#x27;</span>, <span class="string">&#x27;TMP&#x27;</span>, <span class="string">&#x27;ET&#x27;</span>, <span class="string">&#x27;PRE&#x27;</span>, <span class="string">&#x27;TMN&#x27;</span>, <span class="string">&#x27;TMX&#x27;</span>]  <span class="comment"># 特征列</span></span><br><span class="line">target_col = <span class="string">&#x27;target&#x27;</span>  <span class="comment"># 目标列</span></span><br><span class="line">X = df_north_luohe[feature_cols]  <span class="comment"># 特征</span></span><br><span class="line">y = df_north_luohe[target_col]  <span class="comment"># 目标变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 划分训练集 &amp; 测试集，去掉 stratify 参数</span></span><br><span class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, stratify=y, random_state=<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">smote = SMOTE(sampling_strategy=<span class="number">0.3</span>, random_state=<span class="number">42</span>)  <span class="comment"># 让少数类占 40%</span></span><br><span class="line">X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)</span><br><span class="line"></span><br><span class="line">rf_1 = RandomForestClassifier(n_estimators=<span class="number">90</span>, max_depth=<span class="number">10</span>, min_samples_split=<span class="number">2</span>, class_weight=<span class="string">&#x27;balanced&#x27;</span>, random_state=<span class="number">42</span>)</span><br><span class="line">rf_1.fit(X_train_resampled, y_train_resampled)</span><br><span class="line"></span><br><span class="line">y_pred = rf_1.predict(X_test)</span><br><span class="line">y_prob = rf_1.predict_proba(X_test)[:, <span class="number">1</span>]  <span class="comment"># 取正类（1）的概率</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">param_grid = &#123;</span></span><br><span class="line"><span class="string">    &#x27;n_estimators&#x27;:  list(range(90, 151, 5)),</span></span><br><span class="line"><span class="string">    &#x27;max_depth&#x27;:  list(range(10, 21, 1)),</span></span><br><span class="line"><span class="string">    &#x27;min_samples_split&#x27;:  list(range(2, 20, 1))</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">grid_search = GridSearchCV(estimator=rf_1, param_grid=param_grid, </span></span><br><span class="line"><span class="string">                           cv=5, scoring=&#x27;accuracy&#x27;, n_jobs=-1, verbose=1)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">grid_search.fit(X_train, y_train)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 5. 输出最佳参数和最佳分数</span></span><br><span class="line"><span class="string">print(&quot;最佳参数:&quot;, grid_search.best_params_)</span></span><br><span class="line"><span class="string">print(&quot;最佳得分:&quot;, grid_search.best_score_)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估</span></span><br><span class="line"><span class="built_in">print</span>(rf_1.classes_)</span><br><span class="line"><span class="built_in">print</span>(accuracy_score(y_pred, y_test))</span><br><span class="line"><span class="built_in">print</span>(classification_report(y_test, y_pred))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;AUC-ROC:&quot;</span>, roc_auc_score(y_test, y_prob))</span><br><span class="line"><span class="comment"># 训练集上的性能</span></span><br><span class="line">y_train_pred = rf_1.predict(X_train_resampled)</span><br><span class="line">train_accuracy = accuracy_score(y_train_resampled, y_train_pred)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集上的性能</span></span><br><span class="line">y_test_pred = rf_1.predict(X_test)</span><br><span class="line">test_accuracy = accuracy_score(y_test, y_test_pred)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;训练集准确率: <span class="subst">&#123;train_accuracy&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;测试集准确率: <span class="subst">&#123;test_accuracy&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成每个流域的报告</span></span><br><span class="line">report_list = []</span><br><span class="line"><span class="keyword">for</span> train_df <span class="keyword">in</span> watershed_list:</span><br><span class="line">    feature_cols = [<span class="string">&#x27;NDVI&#x27;</span>, <span class="string">&#x27;SM&#x27;</span>, <span class="string">&#x27;TMP&#x27;</span>, <span class="string">&#x27;ET&#x27;</span>, <span class="string">&#x27;PRE&#x27;</span>, <span class="string">&#x27;TMN&#x27;</span>, <span class="string">&#x27;TMX&#x27;</span>]</span><br><span class="line">    target_col = <span class="string">&#x27;target&#x27;</span></span><br><span class="line">    X = train_df[feature_cols]  <span class="comment"># 特征</span></span><br><span class="line">    y = train_df[target_col]  <span class="comment"># 目标变量</span></span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">0.2</span>, stratify=y, random_state=<span class="number">42</span>)</span><br><span class="line">    smote = SMOTE(sampling_strategy=<span class="number">0.3</span>, random_state=<span class="number">42</span>)  <span class="comment"># 过采样</span></span><br><span class="line">    X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)</span><br><span class="line">    rf = RandomForestClassifier(n_estimators=<span class="number">90</span>, max_depth=<span class="number">10</span>, class_weight=<span class="string">&#x27;balanced&#x27;</span>, random_state=<span class="number">42</span>)</span><br><span class="line">    rf.fit(X_train_resampled, y_train_resampled)</span><br><span class="line">    </span><br><span class="line">    y_pred = rf.predict(X_test)</span><br><span class="line">    report_list.append(classification_report(y_test, y_pred, output_dict=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">watershed_names = [<span class="string">&#x27;upper weihe&#x27;</span>, <span class="string">&#x27;middle weihe&#x27;</span>, <span class="string">&#x27;lower weihe&#x27;</span>, <span class="string">&#x27;north luohe&#x27;</span>, <span class="string">&#x27;jinhe&#x27;</span>]  <span class="comment"># 对应流域名称</span></span><br><span class="line">metrics = [<span class="string">&quot;accuracy&quot;</span>, <span class="string">&quot;precision&quot;</span>, <span class="string">&quot;recall&quot;</span>, <span class="string">&quot;f1-score&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取指标</span></span><br><span class="line">accuracy_list = [report[<span class="string">&quot;accuracy&quot;</span>] <span class="keyword">for</span> report <span class="keyword">in</span> report_list]</span><br><span class="line">precision_list = [report[<span class="string">&quot;weighted avg&quot;</span>][<span class="string">&quot;precision&quot;</span>] <span class="keyword">for</span> report <span class="keyword">in</span> report_list]</span><br><span class="line">recall_list = [report[<span class="string">&quot;weighted avg&quot;</span>][<span class="string">&quot;recall&quot;</span>] <span class="keyword">for</span> report <span class="keyword">in</span> report_list]</span><br><span class="line">f1_list = [report[<span class="string">&quot;weighted avg&quot;</span>][<span class="string">&quot;f1-score&quot;</span>] <span class="keyword">for</span> report <span class="keyword">in</span> report_list]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 DataFrame 并写入 Excel</span></span><br><span class="line">metric_df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&quot;Watershed&quot;</span>: watershed_names,</span><br><span class="line">    <span class="string">&quot;Accuracy&quot;</span>: accuracy_list,</span><br><span class="line">    <span class="string">&quot;Precision&quot;</span>: precision_list,</span><br><span class="line">    <span class="string">&quot;Recall&quot;</span>: recall_list,</span><br><span class="line">    <span class="string">&quot;F1-score&quot;</span>: f1_list</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出为 Excel 文件</span></span><br><span class="line">metric_df.to_excel(<span class="string">&quot;rf_model_performance.xlsx&quot;</span>, index=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;正文&quot;&gt;&lt;a href=&quot;#正文&quot; class=&quot;headerlink&quot; title=&quot;正文&quot;&gt;&lt;/a&gt;正文&lt;/h1&gt;&lt;p&gt;大家好！这是我的第一篇博客！&lt;/p&gt;
&lt;p&gt;简单介绍一下吧，本人目前就读于上海某高校数据科学与大数据技术专业，2026年毕业，每天的日常就是</summary>
      
    
    
    
    <category term="Hello Blog" scheme="http://example.com/categories/Hello-Blog/"/>
    
    
  </entry>
  
</feed>
